{
  "swagger": "2.0",
  "info": {
    "version": "0.6-SNAPSHOT",
    "title": "Slicebox API",
    "description": "Slicebox - safe sharing of medical images",
    "contact": {
      "url": "http://github.org/slicebox/slicebox"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://opensource.org/licenses/Apache-2.0"
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "Meta Data",
      "description": "Methods for handling DICOM meta data (attributes)"
    },
    {
      "name": "Images",
      "description": "Methods concerning images and datasets"
    },
    {
      "name": "Boxes",
      "description": "Methods for handling box-to-box connections and issuing box commands"
    },
    {
      "name": "Remote Boxes",
      "description": "Methods for handling box-to-box transactions of images (primarily for internal Slicebox use)"
    },
    {
      "name": "SCPs",
      "description": "Methods for handling DICOM storage class providers for receiving images from PACS"
    },
    {
      "name": "SCUs",
      "description": "Methods for handling DICOM storage class users for sending images to PACS"
    },
    {
      "name": "Directories",
      "description": "Methods for handling watch directories for importing images stored as files"
    },
    {
      "name": "Series Types",
      "description": "Methods for defining and handling series types"
    },
    {
      "name": "Logs",
      "description": "Methods for handling slicebox system log messages"
    },
    {
      "name": "Users",
      "description": "Methods for handling users"
    },
    {
      "name": "System",
      "description": "System management methods"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json",
    "application/octet-stream",
    "multipart/form-data"
  ],
  "produces": [
    "application/json",
    "application/octet-stream"
  ],
  "paths": {

    "/metadata/sources": {
      "get": {
        "description": "Returns a list of currently available data sources. Possible source types are user - data imported by an API call by a user, box - data received from a remote box, directory - data imported via a watched directory or scp - data received from a PACS.",
        "tags": ["Meta Data"],
        "responses": {
          "200": {
            "description": "sources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/source"
              }
            }
          }
        }
      }
    },

    "/metadata/patients": {
      "get": {
        "description": "Returns a list of metadata on the patient level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of patients",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of patients",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "patient property to order results by",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderascending",
            "in": "query",
            "description": "order result ascendingly if true, descendingly otherwise",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter the results by matching substrings of patient properties against this value",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourcetype",
            "in": "query",
            "description": "filter the results by matching on type of source. Type should be one of user, box, directory or scp.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "query",
            "description": "if the sourcetype parameter is present, also filter on the id of the source. E.g. for boxes this means the id of the remote box as available when listing boxes.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "patients",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/patient"
              }
            }
          }
        }          
      }
    },

    "/metadata/patients/query": {
      "post": {
        "description": "submit a query for patients",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of patient query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "patients",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/patient"
              }
            }
          }
        }
      }
    },

    "/metadata/patients/{id}": {
      "get": {
        "description": "Return the patient with the supplied ID",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of patient",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "patient response",
            "schema": {
              "$ref": "#/definitions/patient"            
            }
          },
          "404": {
            "description": "patient not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/studies": {
      "get": {
        "description": "Returns a list of metadata on the study level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of studies",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of studies",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "patientid",
            "in": "query",
            "description": "reference to patient to list studies for",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sourcetype",
            "in": "query",
            "description": "filter the results by matching on type of source. Type should be one of user, box, directory or scp.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "query",
            "description": "if the sourcetype parameter is present, also filter on the id of the source. E.g. for boxes this means the id of the remote box as available when listing boxes.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "studies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/study"
              }
            }
          }
        }          
      }
    },

    "/metadata/studies/query": {
      "post": {
        "description": "submit a query for studies",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of study query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "studies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/study"
              }
            }
          }
        }
      }
    },

    "/metadata/studies/{id}": {
      "get": {
        "description": "Return the study with the supplied ID",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of study",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "study response",
            "schema": {
              "$ref": "#/definitions/study"            
            }
          },
          "404": {
            "description": "study not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/series": {
      "get": {
        "description": "Returns a list of metadata on the series level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of series",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of series",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "studyid",
            "in": "query",
            "description": "reference to study to list series for",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sourcetype",
            "in": "query",
            "description": "filter the results by matching on type of source. Type should be one of user, box, directory or scp.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "query",
            "description": "if the sourcetype parameter is present, also filter on the id of the source. E.g. for boxes this means the id of the remote box as available when listing boxes.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/series"
              }
            }
          }
        }          
      }
    },

    "/metadata/series/query": {
      "post": {
        "description": "submit a query for series",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of series query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/series"
              }
            }
          }
        }
      }
    },

    "/metadata/series/{id}": {
      "get": {
        "description": "Return the series with the supplied ID",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of series",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "series response",
            "schema": {
              "$ref": "#/definitions/series"            
            }
          },
          "404": {
            "description": "series not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/series/{id}/source": {
      "get": {
        "description": "Return the source of the series with the supplied ID",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of series",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "source for series",
            "schema": {
              "$ref": "#/definitions/source"            
            }
          },
          "404": {
            "description": "series not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/images": {
      "get": {
        "description": "Returns a list of metadata on the image level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of images",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of images",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "seriesid",
            "in": "query",
            "description": "reference to series to list images for",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "images",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/image"
              }
            }
          }
        }          
      }
    },

    "/metadata/images/query": {
      "post": {
        "description": "submit a query for images",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of images query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "images",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/image"
              }
            }
          }
        }
      }
    },

    "/metadata/images/{id}": {
      "get": {
        "description": "Return the image with the supplied ID",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of image",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "image response",
            "schema": {
              "$ref": "#/definitions/image"            
            }
          },
          "404": {
            "description": "image not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/flatseries": {
      "get": {
        "description": "Returns a list of flattened metadata on the patient, study and series levels",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of flat series",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of flat series",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "flat series property to order results by",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderascending",
            "in": "query",
            "description": "order result ascendingly if true, descendingly otherwise",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter the results by matching substrings of flat series properties against this value",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourcetype",
            "in": "query",
            "description": "filter the results by matching on type of source. Type should be one of user, box, directory or scp.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "query",
            "description": "if the sourcetype parameter is present, also filter on the id of the source. E.g. for boxes this means the id of the remote box as available when listing boxes.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "flat series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/flatSeries"
              }
            }
          }
        }          
      }
    },

    "/metadata/flatseries/{id}": {
      "get": {
        "description": "Return the flat series with the supplied ID",
        "tags": ["Meta Data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flat series",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "flat series response",
            "schema": {
              "$ref": "#/definitions/flatSeries"            
            }
          },
          "404": {
            "description": "flat series not found (invalid ID)"
          }
        }
      }
    },

    "/images": {
      "post": {
        "description": "add a DICOM dataset to slicebox",
        "tags": ["Images"],
        "parameters": [
          {
            "name": "dataset",
            "in": "formData",
            "description": "The dataset file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "meta data for added dataset on the image level of the DICOM hierarchy",
            "schema": {
              "$ref": "#/definitions/image"
            }
          }
        }
      }
    },

    "/images/{id}": {
      "get": {
        "description": "fetch dataset corresponding to the supplied image ID",
        "tags": ["Images"],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of image",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "binary data of dataset"
          },
          "400": {
            "description": "if no dataset could be found or read for the image corresponding to the supplied image ID"
          },
          "404": {
            "description": "if no image was found for the supplied image ID"
          }
        }
      },
      "delete": {
        "description": "Delete the image with the supplied ID",
        "tags": ["Images"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of image",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "image deleted"
          }
        }
      }
    },

    "/images/{id}/attributes": {
      "get": {
        "description": "list all DICOM attributes of the dataset corresponding to the supplied image ID",
        "tags": ["Images"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of image",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "list of DICOM attributes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/imageAttribute"
              }
            }
          },
          "404": {
            "description": "if no image was found for the supplied image ID"
          }
        }
      }
    },

    "/images/{id}/imageinformation": {
      "get": {
        "description": "get basic information about the pixel data of an image",
        "tags": ["Images"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of image",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "basic information about the pixeldata of an image",
            "schema": {
              "$ref": "#/definitions/imageInformation"
            }
          },
          "404": {
            "description": "if no image was found for the supplied image ID"
          }
        }
      }
    },

    "/images/{id}/png": {
      "get": {
        "description": "get a PNG image representation of the image corresponding to the supplied ID",
        "tags": ["Images"],
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of image",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "framenumber",
            "in": "query",
            "description": "frame/slice to show",
            "required": false,
            "default": 1,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "windowmin",
            "in": "query",
            "description": "intensity window minimum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "windowmax",
            "in": "query",
            "description": "intensity window maximum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageheight",
            "in": "query",
            "description": "height of PNG image. If not specified or set to zero, the image height will equal that of the data",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "image data"
          },
          "404": {
            "description": "if no image was found for the supplied image ID"
          }
        }
      }
    },

    "/images/{id}/anonymize": {
      "post": {
        "description": "delete the selected image and replace it with an anonymized version",
        "tags": ["Images"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of image to anonymize",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tag values",
            "in": "body",
            "description": "specification of values for DICOM attributes",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/entityTagValue"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "image anonymized"
          },
          "404": {
            "description": "image or corresponding dataset not found"
          }
        }
      }
    },

    "/images/anonymizationkeys": {
      "get": {
        "description": "get a list of anonymization keys, each specifying how vital DICOM attributes have been anonymized for a particular image",
        "tags": ["Images"],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of anonymization keys",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of anonymization keys",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "property to order results by",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderascending",
            "in": "query",
            "description": "order result ascendingly if true, descendingly otherwise",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter the results by matching substrings of properties against this value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "anonymization keys, one per DICOM image",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/anonymizationKey"
              }
            }
          }
        }
      }
    },

    "/images/anonymizationkeys/{id}": {
      "delete": {        
        "description": "delete an anonymization key that is no longer of interest",
        "tags": ["Images"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of anonymization key",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "anonymization key deleted"
          }
        }
      }
    },

    "/users": {
      "get": {
        "description": "Returns all users of slicebox",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user. Dupicates are accepted but not added.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user response",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "description": "deletes a single user based on the ID supplied",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "user deleted"
          }
        }
      }
    },
    "/users/generateauthtokens": {
      "post": {
        "description": "generate authentication tokens for the current user. Each token makes it possible to submit a request with the token supplied as the query parameter 'authtoken' instead of providing the standard authentication headers. This is useful in html tags which fetch protected resources but does not allow headers to be specififed. Unused tokens are removed after 24 hours.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "n",
            "in": "query",
            "description": "number of tokens to generate",
            "required": false,
            "default": "1",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "authentication tokens",
            "schema": {
              "$ref": "#/definitions/authToken"
            }
          }
        }
      }
    },

    "/log": {
      "get": {
        "description": "get a list of slicebox log messages",
        "tags": ["Logs"],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of log messages",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of log messages",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "subject",
            "in": "query",
            "description": "log subject to filter results by",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "log type (DEFAULT, INFO, WARN, ERROR) to filter results by",
            "required": false,
            "type": "string"

          }
        ],
        "responses": {
          "200": {
            "description": "log messages",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/logEntry"
              }
            }
          }
        }
      }
    },

    "/log/{id}": {
      "delete": {
        "description": "Delete the log entry with the supplied ID",
        "tags": ["Logs"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of log entry",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "log entry deleted"
          }
        }
      }
    },

    "/system/stop": {
      "post": {
        "description": "stop and shut down slicebox",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "shutdown message"
          }
        }
      }
    },

    "/boxes": {
      "get": {
        "description": "get a list of box connections",
        "tags": ["Boxes"],
        "responses": {
          "200": {
            "description": "box connections",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/box"
              }
            }
          }
        }        
      }
    },

    "/boxes/createconnection": {
      "post": {
        "description": "create a new box connection where the supplied entity holds the remote box name. Used by publicly available boxes.",
        "tags": ["Boxes"],
        "parameters": [
          {
            "name": "remoteBoxName",
            "in": "body",
            "description": "name of box to connect (and send URL) to",
            "required": true,
            "schema": {
              "$ref": "#/definitions/remoteBoxName"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "remote box of the connection",
            "schema": {
              "$ref": "#/definitions/box"
            }
          }
        }                
      }
    },

    "/boxes/connect": {
      "post": {
        "description": "connect to another box using a received URL. Used to connect to a public box.",
        "tags": ["Boxes"],
        "parameters": [
          {
            "name": "remoteBox",
            "in": "body",
            "description": "remote box to connect with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/remoteBox"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "connected box",
            "schema": {
              "$ref": "#/definitions/box"
            }
          }
        }                
      }
    },

    "/boxes/{id}": {
      "delete": {
        "description": "Delete the remote box with the supplied ID",
        "tags": ["Boxes"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of box to remove",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "box deleted"
          }
        }
      }
    },

    "/boxes/{id}/sendpatients": {
      "post": {
        "description": "send all images corresponding to the selected patients to the remote box with the supplied ID",
        "tags": ["Boxes"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of box to send images to",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "box send data",
            "in": "body",
            "description": "specification of which entities to send and list of DICOM attribute values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boxSendData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "images sent"
          },
          "404": {
            "description": "box not found (invalid ID)"
          }
        }
      }
    },

    "/boxes/{id}/sendstudies": {
      "post": {
        "description": "send all images corresponding to the selected studies to the remote box with the supplied ID",
        "tags": ["Boxes"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of box to send images to",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "box send data",
            "in": "body",
            "description": "specification of which entities to send and list of DICOM attribute values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boxSendData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "images sent"
          },
          "404": {
            "description": "box not found (invalid ID)"
          }
        }
      }
    },

    "/boxes/{id}/sendseries": {
      "post": {
        "description": "send all images corresponding to the selected series to the remote box with the supplied ID",
        "tags": ["Boxes"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of box to send images to",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "box send data",
            "in": "body",
            "description": "specification of which entities to send and list of DICOM attribute values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/boxSendData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "images sent"
          },
          "404": {
            "description": "box not found (invalid ID)"
          }
        }
      }
    },

    "/inbox": {
      "get": {        
        "description": "get contents of inbox (records of received images)",
        "tags": ["Boxes"],
        "responses": {
          "200": {
            "description": "incoming transactions, handled and in progress",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/inboxEntry"
              }
            }
          }
        }        
      }
    },

    "/outbox": {
      "get": {        
        "description": "get contents of outbox (records of outgoing transactions, failed or in progress)",
        "tags": ["Boxes"],
        "responses": {
          "200": {
            "description": "outgoing transactions, failed or in progress",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/outboxEntry"
              }
            }
          }
        }        
      }
    },

    "/outbox/{id}": {
      "delete": {        
        "description": "delete a transaction from the outbox, thus cancelling sending the corresponding image",
        "tags": ["Boxes"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of outbox entry",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "outbox entry deleted"
          }
        }
      }
    },

    "/box/{token}/image": {
      "post": {
        "description": "add an image (dataset) as part of a transaction. This method is used when sending images using the push method to a public slicebox.",
        "tags": ["Remote Boxes"],
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "authentication token identifying the current box-to-box connection",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionid",
            "in": "query",
            "description": "the ID of this transaction",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sequencenumber",
            "in": "query",
            "description": "the index of this image in the transaction",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "totalimagecount",
            "in": "query",
            "description": "the total number of images in this transaction",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dataset",
            "in": "body",
            "description": "the dataset byte array",
            "required": true,
            "schema": {
            }
          }
        ],
        "responses": {
          "201": {
            "description": "image data received"
          },
          "401": {
            "description": "unauthorized, invalid token"
          }
        }        
      }
    },

    "/box/{token}/outbox/poll": {
      "get": {
        "description": "get next outbox entry (next image that the connected box wishes to send to you), if any. This method is used when sending images using the poll method from a public slicebox.",
        "tags": ["Remote Boxes"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "authentication token identifying the current box-to-box connection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "next outbox entry",
            "schema": {
              "$ref": "#/definitions/outboxEntry"
            }
          },
          "401": {
            "description": "unauthorized, invalid token"
          },
          "404": {
            "description": "outbox of connected box is empty"
          }
        }                
      }
    },

    "/box/{token}/outbox": {
      "get": {
        "description": "fetch an image from the connected box as part of a transaction. This method is used when sending images using the poll method from a public slicebox.",
        "tags": ["Remote Boxes"],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "authentication token identifying the current box-to-box connection",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionid",
            "in": "query",
            "description": "the ID of this transaction",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sequencenumber",
            "in": "query",
            "description": "the index of this image in the transaction",
            "required": true,
            "type": "integer",
            "format": "int64"
          }          
        ],
        "responses": {
          "200": {
            "description": "binary data of dataset"
          },
          "401": {
            "description": "unauthorized, invalid token"
          },
          "404": {
            "description": "no outbox entry found for the supplied transaction id and sequence number"
          }
        }
      }
    },

    "/box/{token}/outbox/done": {
      "post": {
        "description": "signal that the supplied outbox entry was successfully received and can be removed. This method is used when sending images using the poll method from a public slicebox.",
        "tags": ["Remote Boxes"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "authentication token identifying the current box-to-box connection",
            "required": true,
            "type": "string"
          },
          {
            "name": "outbox entry",
            "in": "body",
            "description": "outbox entry that has been successfully received",
            "required": true,
            "schema": {
              "$ref": "#/definitions/outboxEntry"              
            }
          }
        ],
        "responses": {
          "201": {
            "description": "done message received"
          },
          "401": {
            "description": "unauthorized, invalid token"
          }
        }                
      }
    },

    "/directorywatches": {
      "get": {
        "description": "get a list of watch directories. Each watch directory and its sub-directories are watched for incoming DICOM files, which are read and imported into slicebox.",
        "tags": ["Directories"],
        "responses": {
          "200": {
            "description": "the list of watched directories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/watchedDirectory"
              }
            }
          }
        }
      },
      "post": {
        "description": "add a new directory to watch for incoming DICOM files",
        "tags": ["Directories"],
        "parameters": [
          {
            "name": "watchDirectory",
            "description": "directory to setup a watch for",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/watchDirectory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "the directory now being watched",
            "schema": {
              "$ref": "#/definitions/watchedDirectory"
            }
          }
        }        
      }
    },

    "/directorywatches/{id}": {
      "delete": {
        "description": "stop watching and remove the directory corresponding to the supplied ID",
        "tags": ["Directories"],
        "parameters": [
          {
            "name": "id",
            "description": "id of directory to stop watching",
            "in": "path",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "directory watch removed"
          }
        }        
      }      
    },

    "/scps": {
      "get": {
        "description": "get a list of DICOM SCPs. Each SCP is a server for receiving DICOM images from e.g. a PACS system.",
        "tags": ["SCPs"],
        "responses": {
          "200": {
            "description": "the list of SCPs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/scp"
              }
            }
          }
        }
      },
      "post": {
        "description": "add a new SCP for receiving DICOM images",
        "tags": ["SCPs"],
        "parameters": [
          {
            "name": "addScp",
            "description": "SCP information",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/addScp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "the created SCP",
            "schema": {
              "$ref": "#/definitions/scp"
            }
          }
        }        
      }
    },

    "/scps/{id}": {
      "delete": {
        "description": "shut down and remove the SCP corresponding to the supplied ID",
        "tags": ["SCPs"],
        "parameters": [
          {
            "name": "id",
            "description": "id of SCP to remove",
            "in": "path",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "SCP removed"
          }
        }        
      }      
    },

    "/scus": {
      "get": {
        "description": "get a list of DICOM SCUs. Each SCU is a client for sending DICOM images to an SCP, e.g. a PACS system.",
        "tags": ["SCUs"],
        "responses": {
          "200": {
            "description": "the list of SCUs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/scu"
              }
            }
          }
        }
      },
      "post": {
        "description": "add a new SCU for sending DICOM images",
        "tags": ["SCUs"],
        "parameters": [
          {
            "name": "addScu",
            "description": "SCU information",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/addScu"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "the created SCU",
            "schema": {
              "$ref": "#/definitions/scu"
            }
          }
        }        
      }
    },

    "/scus/{id}": {
      "delete": {
        "description": "remove the SCU corresponding to the supplied ID",
        "tags": ["SCUs"],
        "parameters": [
          {
            "name": "id",
            "description": "id of SCU to remove",
            "in": "path",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "SCU removed"
          }
        }        
      }      
    }

  },


  "definitions": {
    "source": {
      "properties": {
        "sourceType": {
          "type": "string"
        },
        "sourceName": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "anonymizationKey": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"          
        },
        "created": {
          "type": "integer",
          "format": "int64"          
        },
        "patientName": {
          "type": "string"
        },
        "anonPatientName": {
          "type": "string"
        },
        "patientID": {
          "type": "string"
        },
        "anonPatientID": {
          "type": "string"
        },
        "patientBirthDate": {
          "type": "string"
        },
        "studyInstanceUID": {
          "type": "string"
        },
        "anonStudyInstanceUID": {
          "type": "string"
        },
        "studyDescription": {
          "type": "string"
        },
        "studyID": {
          "type": "string"
        },
        "accessionNumber": {
          "type": "string"
        }
      }
    },
    "addScu": {
      "properties": {
        "name": {
          "type": "string"
        },
        "aeTitle": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "scu": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"          
        },
        "name": {
          "type": "string"
        },
        "aeTitle": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "addScp": {
      "properties": {
        "name": {
          "type": "string"
        },
        "aeTitle": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "scp": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"          
        },
        "name": {
          "type": "string"
        },
        "aeTitle": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "watchDirectory": {
      "properties": {
        "pathString": {
          "type": "string"
        }
      }
    },
    "watchedDirectory": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"          
        },
        "path": {
          "type": "string"
        }
      }
    },
    "outboxEntry": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "remoteBoxId": {
          "type": "integer",
          "format": "int64"
        },
        "transactionId": {
          "type": "integer",
          "format": "int64"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64"
        },
        "totalImageCount": {
          "type": "integer",
          "format": "int64"
        },
        "imageFileId": {
          "type": "integer",
          "format": "int64"          
        },
        "failed": {
          "type": "boolean"
        }
      }
    },
    "inboxEntry": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "remoteBoxId": {
          "type": "integer",
          "format": "int64"
        },
        "transactionId": {
          "type": "integer",
          "format": "int64"
        },
        "receivedImageCount": {
          "type": "integer",
          "format": "int64"
        },
        "totalImageCount": {
          "type": "integer",
          "format": "int64"
        }        
      }
    },
    "tagValue" : {
      "properties": {
        "tag": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "entityTagValue": {
      "properties": {
        "entityId": {
          "type": "integer",
          "format": "int64"
        },
        "tagValue": {
          "$ref": "#/definitions/tagValue"
        }        
      }
    },
    "boxSendData": {
      "properties": {
        "entityIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "tagValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entityTagValue"
          }          
        }
      }
    },
    "remoteBox": {
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        }
      }
    },
    "remoteBoxName": {
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "box": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "sendMethod": {
          "type": "string"
        },
        "online": {
          "type": "boolean"
        }
      }
    },
    "dicomProperty": {
      "properties": {
        "name": {
          "type": "string"
        },
        "dicomTag": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "dicomPropertyValue": {
      "properties": {
        "property": {
          "$ref": "#/definitions/dicomProperty"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "patient": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "patientName": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientBirthDate": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientSex": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "study": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "patientId": {
          "type": "integer",
          "format": "int64"
        },
        "studyInstanceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "studyDescription": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "studyDate": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "studyID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "accessionNumber": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientAge": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },    
    "series": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "studyId": {
          "type": "integer",
          "format": "int64"
        },
        "equipmentId": {
          "type": "integer",
          "format": "int64"
        },
        "frameOfReferenceId": {
          "type": "integer",
          "format": "int64"
        },
        "seriesInstanceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "seriesDescription": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "seriesDate": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "modality": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "protocolName": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "bodyPartExamined": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "equipment": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },        
        "manufacturer": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "stationName": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "frameOfReference": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },        
        "frameOfReferenceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "image": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },        
        "seriesId": {
          "type": "integer",
          "format": "int64"
        },        
        "sopInstanceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "imageType": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "instanceNumber": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "flatSeries": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "patient": {
          "$ref": "#/definitions/patient"
        },
        "study": {
          "$ref": "#/definitions/study"
        },
        "equipment": {
          "$ref": "#/definitions/equipment"
        },
        "frameOfReference": {
          "$ref": "#/definitions/frameOfReference"
        },
        "series": {
          "$ref": "#/definitions/series"
        }
      }
    },
    "imageAttribute": {
      "properties": {
        "group": {
          "type": "string"
        }, 
        "element": {
          "type": "string"
        }, 
        "vr": {
          "type": "string"
        }, 
        "length": {
          "type": "integer",
          "format": "int32"
        }, 
        "multiplicity": {
          "type": "integer",
          "format": "int32"
        }, 
        "depth": {
          "type": "integer",
          "format": "int32"
        }, 
        "path": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "value": {
          "type": "string"
        }
      }
    },
    "imageInformation": {
      "properties": {
        "numberOfFrames": {
          "type": "integer",
          "format": "int32"
        },
        "frameIndex": {
          "type": "integer",
          "format": "int32"
        },
        "minimumPixelValue": {
          "type": "integer",
          "format": "int32"
        },
        "maximumPixelValue": {
          "type": "integer",
          "format": "int32"
        }        
      }
    },
    "queryProperty": {
      "properties": {
        "propertyName": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        }
      }
    },
    "query": {
      "properties": {
        "startindex": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "orderby": {
          "type": "string"
        },
        "orderascending": {
          "type": "boolean"
        },
        "queryProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/queryProperty"
          }
        }
      }
    },
    "user": {
      "required": [
        "id",
        "user",
        "role"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "hashedPassword": {
          "type": "string"
        }
      }
    },
    "newUser": {
      "properties": {
        "user": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "authToken": {
      "properties": {
        "token": {
          "type": "string"
        }              
      }
    },
    "logEntry": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "integer",
          "format": "int64"
        },
        "entryType": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "errorModel": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}