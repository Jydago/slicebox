{
  "swagger": "2.0",
  "info": {
    "version": "0.3",
    "title": "Slicebox API",
    "description": "Slicebox - safe sharing of medical images",
    "contact": {
      "url": "http://github.org/KarlSjostrand/slicebox"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://opensource.org/licenses/Apache-2.0"
    }
  },
  "host": "127.0.0.1:5000",
  "basePath": "/api",
  "tags": [
    {
      "name": "Meta Data",
      "description": "Methods for handling DICOM meta data (attributes)"
    },
    {
      "name": "Images",
      "description": "Methods concerning images"
    },
    {
      "name": "Boxes",
      "description": "Methods for handling box-to-box connections and issuing box commands"
    },
    {
      "name": "Remote Boxes",
      "description": "Methods for handling box-to-box transactions of images (primarily for internal Slicebox use)"
    },
    {
      "name": "SCPs",
      "description": "Methods for handling DICOM storage class providers for receiving images from PACS"
    },
    {
      "name": "SCUs",
      "description": "Methods for handling DICOM storage class users for sending images to PACS"
    },
    {
      "name": "Directories",
      "description": "Methods for handling watch directories for importing images stored as files"
    },
    {
      "name": "Series Types",
      "description": "Methods for defining and handling series types"
    },
    {
      "name": "Logs",
      "description": "Methods for handling log messages"
    },
    {
      "name": "Users",
      "description": "Methods for handling users"
    },
    {
      "name": "System",
      "description": "System management methods"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json",
    "application/octet-stream",
    "multipart/form-data"
  ],
  "produces": [
    "application/json",
    "application/octet-stream"
  ],
  "paths": {

    "/metadata/patients": {
      "get": {
        "description": "Returns a list of metadata on the patient level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "operationId": "findPatients",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of patients",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of patients",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "patient property to order results by",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderascending",
            "in": "query",
            "description": "order result ascendingly if true, descendingly otherwise",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter the results by matching substrings of patient properties against this value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "patients",
            "schema": {
              "$ref": "#/definitions/patient"
            }
          }
        }          
      }
    },

    "/metadata/patients/query": {
      "post": {
        "description": "submit a query for patients",
        "tags": ["Meta Data"],
        "operationId": "queryPatients",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of patient query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "patients",
            "schema": {
              "$ref": "#/definitions/patient"
            }
          }
        }
      }
    },

    "/metadata/patients/{id}": {
      "get": {
        "description": "Return the patient with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "findPatient",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "patient response",
            "schema": {
              "$ref": "#/definitions/patient"            
            }
          },
          "404": {
            "description": "patient not found (invalid ID)"
          }
        }
      },
      "delete": {
        "description": "Delete the patient with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "deletePatient",
        "responses": {
          "201": {
            "description": "patient deleted"
          },
          "404": {
            "description": "patient not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/studies": {
      "get": {
        "description": "Returns a list of metadata on the study level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "operationId": "findStudies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of studies",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of studies",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "reference to patient to list studies for",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "studies",
            "schema": {
              "$ref": "#/definitions/study"
            }
          }
        }          
      }
    },

    "/metadata/studies/query": {
      "post": {
        "description": "submit a query for studies",
        "tags": ["Meta Data"],
        "operationId": "queryStudies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of study query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "studies",
            "schema": {
              "$ref": "#/definitions/study"
            }
          }
        }
      }
    },

    "/metadata/studies/{id}": {
      "get": {
        "description": "Return the study with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "findtudy",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "study response",
            "schema": {
              "$ref": "#/definitions/study"            
            }
          },
          "404": {
            "description": "study not found (invalid ID)"
          }
        }
      },
      "delete": {
        "description": "Delete the study with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "deleteStudy",
        "responses": {
          "201": {
            "description": "study deleted"
          },
          "404": {
            "description": "study not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/series": {
      "get": {
        "description": "Returns a list of metadata on the series level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "operationId": "findSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of series",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of series",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "studyId",
            "in": "query",
            "description": "reference to study to list series for",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "series",
            "schema": {
              "$ref": "#/definitions/series"
            }
          }
        }          
      }
    },

    "/metadata/series/query": {
      "post": {
        "description": "submit a query for series",
        "tags": ["Meta Data"],
        "operationId": "querySeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of series query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "series",
            "schema": {
              "$ref": "#/definitions/series"
            }
          }
        }
      }
    },

    "/metadata/series/{id}": {
      "get": {
        "description": "Return the series with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "findSeries",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "series response",
            "schema": {
              "$ref": "#/definitions/series"            
            }
          },
          "404": {
            "description": "series not found (invalid ID)"
          }
        }
      },
      "delete": {
        "description": "Delete the series with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "deleteSeries",
        "responses": {
          "201": {
            "description": "series deleted"
          },
          "404": {
            "description": "series not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/images": {
      "get": {
        "description": "Returns a list of metadata on the image level of the DICOM hierarchy",
        "tags": ["Meta Data"],
        "operationId": "findImages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of images",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of images",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "seriesId",
            "in": "query",
            "description": "reference to series to list images for",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "images",
            "schema": {
              "$ref": "#/definitions/image"
            }
          }
        }          
      }
    },

    "/metadata/images/query": {
      "post": {
        "description": "submit a query for images",
        "tags": ["Meta Data"],
        "operationId": "queryImages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "parameters of images query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "images",
            "schema": {
              "$ref": "#/definitions/image"
            }
          }
        }
      }
    },

    "/metadata/images/{id}": {
      "get": {
        "description": "Return the image with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "findImage",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "image response",
            "schema": {
              "$ref": "#/definitions/image"            
            }
          },
          "404": {
            "description": "image not found (invalid ID)"
          }
        }
      },
      "delete": {
        "description": "Delete the image with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "deleteImage",
        "responses": {
          "201": {
            "description": "image deleted"
          },
          "404": {
            "description": "image not found (invalid ID)"
          }
        }
      }
    },

    "/metadata/flatseries": {
      "get": {
        "description": "Returns a list of flattened metadata on the patient, study and series levels",
        "tags": ["Meta Data"],
        "operationId": "findFlatSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startindex",
            "in": "query",
            "description": "start index of returned slice of flat series",
            "required": false,
            "default": "0",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "count",
            "in": "query",
            "description": "size of returned slice of flat series",
            "required": false,
            "default": "20",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "flat series property to order results by",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderascending",
            "in": "query",
            "description": "order result ascendingly if true, descendingly otherwise",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter the results by matching substrings of flat series properties against this value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "flat series",
            "schema": {
              "$ref": "#/definitions/flatSeries"
            }
          }
        }          
      }
    },

    "/metadata/flatseries/{id}": {
      "get": {
        "description": "Return the flat series with the supplied ID",
        "tags": ["Meta Data"],
        "operationId": "findFlatSeries",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "flat series response",
            "schema": {
              "$ref": "#/definitions/flatSeries"            
            }
          },
          "404": {
            "description": "flat series not found (invalid ID)"
          }
        }
      }
    },

    "/users": {
      "get": {
        "description": "Returns all users of slicebox",
        "tags": ["Users"],
        "operationId": "findUsers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user. Dupicates are accepted but not added.",
        "tags": ["Users"],
        "operationId": "addUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user response",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "description": "deletes a single user based on the ID supplied",
        "tags": ["Users"],
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "user deleted"
          }
        }
      }
    },
    "/users/generateauthtokens": {
      "post": {
        "description": "generate authentication tokens for the current user. Each token makes it possible to submit a request with the token supplied as the query parameter 'authtoken' instead of providing the standard authentication headers. This is useful in html tags which fetch protected resources but does not allow headers to be specififed. Unused tokens are removed after 24 hours.",
        "tags": ["Users"],
        "operationId": "generateAuthTokens",
        "parameters": [
          {
            "name": "n",
            "in": "query",
            "description": "number of tokens to generate",
            "required": false,
            "default": "1",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "authentication tokens",
            "schema": {
              "$ref": "#/definitions/authToken"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "dicomProperty": {
      "properties": {
        "name": {
          "type": "string"
        },
        "dicomTag": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "dicomPropertyValue": {
      "properties": {
        "property": {
          "$ref": "#/definitions/dicomProperty"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "patient": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "patientName": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientBirthDate": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientSex": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "study": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "patientId": {
          "type": "integer",
          "format": "int64"
        },
        "studyInstanceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "studyDescription": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "studyDate": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "studyID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "accessionNumber": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "patientAge": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },    
    "series": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "studyId": {
          "type": "integer",
          "format": "int64"
        },
        "equipmentId": {
          "type": "integer",
          "format": "int64"
        },
        "frameOfReferenceId": {
          "type": "integer",
          "format": "int64"
        },
        "seriesInstanceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "seriesDescription": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "seriesDate": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "modality": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "protocolName": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "bodyPartExamined": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "equipment": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },        
        "manufacturer": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "stationName": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "frameOfReference": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },        
        "frameOfReferenceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "image": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },        
        "seriesId": {
          "type": "integer",
          "format": "int64"
        },        
        "sopInstanceUID": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "imageType": {
          "$ref": "#/definitions/dicomPropertyValue"
        },
        "instanceNumber": {
          "$ref": "#/definitions/dicomPropertyValue"
        }
      }
    },
    "flatSeries": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "patient": {
          "$ref": "#/definitions/patient"
        },
        "study": {
          "$ref": "#/definitions/study"
        },
        "equipment": {
          "$ref": "#/definitions/equipment"
        },
        "frameOfReference": {
          "$ref": "#/definitions/frameOfReference"
        },
        "series": {
          "$ref": "#/definitions/series"
        }
      }
    },
    "queryProperty": {
      "properties": {
        "propertyName": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        }
      }
    },
    "query": {
      "properties": {
        "startindex": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "orderby": {
          "type": "string"
        },
        "orderascending": {
          "type": "boolean"
        },
        "queryProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/queryProperty"
          }
        }
      }
    },
    "user": {
      "required": [
        "id",
        "user",
        "role"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "hashedPassword": {
          "type": "string"
        }
      }
    },
    "newUser": {
      "properties": {
        "user": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "authToken": {
      "properties": {
        "token": {
          "type": "string"
        }              
      }
    },
    "errorModel": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}